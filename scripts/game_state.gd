extends Node 

@onready var ball: Ball = $/root/Game/Ball;
@onready var right_hoop: Node3D = $/root/Game/Hoops/RightHoop;
@onready var left_hoop: Node3D = $/root/Game/Hoops/LeftHoop;
@onready var start: Node3D = $/root/Game/Start

func get_hoop(which):
	return right_hoop if which else right_hoop

var ball_scene: PackedScene = load("res://scenes/ball.tscn");
var agent_body_path = "res://scenes/pukeko.tscn"
var ga = GeneticAlgorithm.new(9, 6, agent_body_path, true, 'pukeko_params')

# 1.0 = one second. time gets reset every time_step, then all agents get updated
var time = 0
# total_time gets reset every time a new generation is started
var total_time = 0
# every time_step the cars network takes sensory information and decides how to act
var time_step = 0.2
# every generation_step a new generation is made. this gets increased over time.
var generation_step = 60 
var paused = true

func reset_world():
	ball.queue_free()
	ball = ball_scene.instantiate()
	add_child(ball)
	ball.global_position = Vector3.UP * 4 + Vector3(randf_range(-3, 3), 0.0, randf_range(-3, 3))

func _ready() -> void:
	add_child(ga)
	place_bodies(ga.get_curr_bodies())
	paused = false
	Engine.time_scale *= 32.0 
	Engine.physics_ticks_per_second *= 32.0
	reset_world()

func place_bodies(bodies: Array) -> void:
	"""Adds the bodies scenes generated by the ga to the tree, and removes the old ones.
	"""
	# remove the bodies from the last generation
	for last_gen_body in start.get_children():
		last_gen_body.queue_free()
	# add the new bodies to the track
	for body in bodies:
		start.add_child(body)
		body.team = randf_range(0, 1) > 0.5

func _physics_process(delta: float) -> void:
	if not paused:
		time += delta; total_time += delta
		# if enough time has passed for the next time_step, update all agents
		if time > time_step:
			ga.next_timestep()
			time = 0
		# check if enough time has passed to start a new generation
		if total_time > generation_step or ga.all_agents_dead:
			# check if the best agent exceeded the fitness threshold
			ga.evaluate_generation()
			# go to the next gen
			ga.next_generation()
			place_bodies(ga.get_curr_bodies())
			reset_world()
			# every x gens, increase the generation_step
			if ga.curr_generation % 2 == 0:
				generation_step += 1 
				print("increased step to " + str(generation_step))
			total_time = 0
